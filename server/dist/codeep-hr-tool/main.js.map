{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/confirm/confirm.component.css","webpack:///./src/app/confirm/confirm.component.html","webpack:///./src/app/confirm/confirm.component.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/guards/auth.guard.ts","webpack:///./src/main.ts","webpack:///./src/services/authentication.service.ts","webpack:///./src/services/user.service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n      <router-outlet></router-outlet>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ConfirmComponent } from './confirm/confirm.component';\nimport { HomeComponent } from './home/home.component';\nimport { routing } from \"./app.routing\";\nimport {UserService} from \"../services/user.service\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {AuthenticationService} from \"../services/authentication.service\";\nimport {CookieService} from \"ngx-cookie-service\";\nimport {AuthGuard} from \"../guards/auth.guard\";\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        LoginComponent,\n        RegisterComponent,\n        ConfirmComponent,\n        HomeComponent\n    ],\n    imports: [\n        BrowserModule,\n        routing,\n        ReactiveFormsModule,\n        FormsModule,\n        HttpClientModule\n    ],\n    providers: [\n        AuthGuard,\n        UserService,\n        AuthenticationService,\n        CookieService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { ConfirmComponent } from './confirm/confirm.component';\r\nimport { AuthGuard } from \"../guards/auth.guard\";\r\n\r\nconst appRoutes: Routes = [\r\n    {path: 'home', component: HomeComponent, canActivate: [AuthGuard]},\r\n    {path: 'login', component: LoginComponent},\r\n    {path: 'register', component: RegisterComponent},\r\n    {path: 'confirm', component: ConfirmComponent},\r\n\r\n\r\n    // otherwise redirect to home\r\n    {path: '**', redirectTo: 'login'},\r\n\r\n];\r\n\r\nexport const routing = RouterModule.forRoot(appRoutes);","module.exports = \".display-4 {\\r\\n    font-size: 2.5rem;\\r\\n}\\r\\n.form-control:focus {\\r\\n    border-color: #28A745;\\r\\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px #28A745;\\r\\n}\"","module.exports = \"<h1 class=\\\"text-center mt-5 text-success display-4\\\">Verify account</h1>\\n<div class=\\\"pt-3\\\">\\n    <div class=\\\"row justify-content-sm-center\\\">\\n        <div class=\\\"col-sm-10 col-md-12\\\">\\n            <div class=\\\"card border-0\\\">\\n                <div class=\\\"card-header text-success\\\">Enter the verification code from your email</div>\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-4 pt-3  m-auto\\\">\\n                            <form class=\\\"form-submit \\\">\\n                                <input type=\\\"text\\\" name=\\\"code\\\" class=\\\"form-control mb-3\\\" placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"code\\\" required autofocus>\\n                                <p *ngIf=\\\"loading\\\" class=\\\"text-danger\\\">Wrong verification code</p>\\n                                <button class=\\\"btn btn-lg btn-outline-success btn-block mb-1\\\" type=\\\"submit\\\" (click)=\\\"confirmCode()\\\">Submit\\n                                </button>\\n                            </form>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"pt-3\\\">\\n    <div class=\\\"row justify-content-sm-center\\\">\\n        <div class=\\\"col-sm-10 col-md-12\\\">\\n            <div class=\\\"card border-0\\\">\\n                <div class=\\\"card-header text-success\\\">Resend the verification code</div>\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-4 pt-3 m-auto\\\">\\n                            <form class=\\\"form-resend\\\">\\n                                <button class=\\\"btn btn-lg btn-outline-success btn-block mb-1\\\" type=\\\"submit\\\"  (click)=\\\"refreshCode()\\\">Resend\\n                                </button>\\n                            </form>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<hr>\"","import {Component, OnInit} from '@angular/core';\nimport {UserService} from \"../../services/user.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n\n@Component({\n    selector: 'app-confirm',\n    templateUrl: './confirm.component.html',\n    styleUrls: ['./confirm.component.css']\n})\nexport class ConfirmComponent implements OnInit {\n    id: string;\n    code: number;\n    data: any;\n    loading = false;\n\n    constructor(\n        private userService: UserService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) {\n        this.route.queryParams.subscribe(params => {\n            this.id = params['data'];\n        });\n    }\n\n    ngOnInit() {\n    }\n\n    refreshCode() {\n        this.userService.updateCode({id: this.id}).subscribe(res => {\n                console.log(res, \"res\");\n            }\n        );\n    }\n\n    confirmCode() {\n        this.userService.confirm( { confirmCode: this.code, id: this.id }).subscribe(res => {\n                this.data = res;\n                if (this.data.status === \"active\") {\n                    this.router.navigate(['/home']);\n                }\n            },\n            error => this.loading = true\n        );\n    }\n\n}\n","module.exports = \"\"","module.exports = \"<h1 class=\\\"text-center mt-5 text-success display-4\\\">Coming Soon</h1>\\r\\n<div class=\\\"container pt-3\\\">\\r\\n\\r\\n</div>\\r\\n<hr>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".form-control:focus {\\r\\n    border-color: #28A745;\\r\\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px #28A745;\\r\\n}\\r\\n\\r\\n.display-4 {\\r\\n    font-size: 2.5rem;\\r\\n}\\r\\n\\r\\n.custom-checkbox .custom-control-input:checked ~ .custom-control-label::before {\\r\\n    background-color: #28A745;;\\r\\n}\"","module.exports = \"<h1 class=\\\"text-center mt-5 text-success display-4\\\">Codeep Hr Tool</h1>\\n<div class=\\\"pt-3\\\">\\n    <div class=\\\"row justify-content-sm-center\\\">\\n        <div class=\\\"col-sm-10 col-md-12\\\">\\n            <div class=\\\"card border-0\\\">\\n                <div class=\\\"card-header text-success\\\">Sign in to continue</div>\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-4 text-center align-self-center\\\">\\n                            <img class=\\\"img-fluid\\\" src=\\\"../../assets/images/logo.png\\\">\\n                        </div>\\n                        <div class=\\\"col-md-4 pt-4\\\">\\n                            <form class=\\\"form-signin\\\" [formGroup]=\\\"loginForm\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <p class=\\\"text-danger\\\"  *ngIf=\\\"loading\\\">Wrong password or email</p>\\n                                    <p class=\\\"text-danger\\\"  *ngIf=\\\"loading_1\\\">Wrong password</p>\\n                                    <input type=\\\"text\\\" class=\\\"form-control mb-3\\\" formControlName=\\\"email\\\"\\n                                           placeholder=\\\"Email\\\" required autofocus>\\n                                    <div *ngIf=\\\"email.errors && (email.dirty || email.touched)\\\">\\n                                        <p  class=\\\"text-danger\\\" *ngIf=\\\"!!email.errors.required\\\">Email is\\n                                            required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"!!email.errors.pattern\\\">For example:\\n                                            \\\"you@email.com\\\"</p>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\\"form-group\\\">\\n                                    <input type=\\\"password\\\" class=\\\"form-control mb-3\\\" formControlName=\\\"password\\\"\\n                                           placeholder=\\\"Password\\\" required>\\n                                    <div *ngIf=\\\"password.errors && (password.dirty || password.touched)\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"!!password.errors.required\\\">Password is\\n                                            required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"!!password.errors.pattern\\\">Password must be at\\n                                            least 6 characters and include a number</p>\\n                                    </div>\\n                                </div>\\n                                <button class=\\\"btn btn-lg btn-outline-success btn-block mb-1\\\" type=\\\"submit\\\"\\n                                        [disabled]=\\\"loginForm.invalid\\\" (click)=\\\"userLogin()\\\">Sign in\\n                                </button>\\n                                <div class=\\\"custom-control custom-checkbox text-success \\\">\\n                                    <input type=\\\"checkbox\\\" class=\\\"custom-control-input \\\" id=\\\"customCheck1\\\">\\n                                    <label class=\\\"custom-control-label\\\" for=\\\"customCheck1\\\">Remember me</label>\\n                                </div>\\n                            </form>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <a routerLink=\\\"/register\\\" class=\\\"float-right text-success\\\">Create an account </a>\\n        </div>\\n    </div>\\n</div>\\n<hr>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AuthenticationService} from \"../../services/authentication.service\";\nimport {Router} from \"@angular/router\";\n\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n    data: any;\n    loading = false;\n    loading_1 = false;\n    loginForm: FormGroup;\n    email: FormControl;\n    password: FormControl;\n\n    constructor(\n        private authenticationService: AuthenticationService,\n        private router: Router\n    ) {\n    }\n\n    ngOnInit() {\n        this.createFormControls();\n        this.createForm();\n    }\n\n    createFormControls() {\n\n        this.email = new FormControl('', [\n            Validators.required,\n            Validators.pattern(\"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,6})+$\")\n        ]);\n\n        this.password = new FormControl(\n            '', [\n                Validators.required,\n                Validators.pattern(/^(?=.*?[a-z])(?=.*?[0-9]).{6,}$/)\n            ]);\n\n    };\n\n    createForm() {\n        this.loginForm = new FormGroup({\n            email: this.email,\n            password: this.password\n        });\n    };\n\n    userLogin() {\n        if (this.loginForm.invalid) {\n            return;\n        }\n        this.authenticationService.login(this.loginForm.value).subscribe(\n            res => {\n                this.data = res;\n                if (this.data.status === 'confirm') {\n                    this.router.navigate(['/home']);\n                }\n            },\n            error => {\n\n                if (error.error.errors === 'wrong password or email') {\n                        this.loading = true;\n                    setTimeout(()=> {\n                        this.loading = false;\n                    }, 2000);\n                }\n                if (error.error.errors === 'wrong password') {\n                    this.loading_1 = true;\n                    setTimeout(()=> {\n                        this.loading_1 = false;\n                    }, 2000);\n                }\n            });\n    }\n\n}\n\n//|| error.error === 'wrong password'","module.exports = \".form-control:focus {\\r\\n    border-color: #28A745;\\r\\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px #28A745;\\r\\n}\\r\\n\\r\\n.display-4 {\\r\\n    font-size: 2.5rem;\\r\\n}\\r\\n\"","module.exports = \"<h1 class=\\\"text-center mt-5 text-success display-4\\\">Registration Form</h1>\\n<div class=\\\"pt-3\\\">\\n    <div class=\\\"row justify-content-sm-center\\\">\\n        <div class=\\\"col-sm-10 col-md-12\\\">\\n            <div class=\\\"card border-0\\\">\\n                <div class=\\\"card-header text-success\\\">Register to continue</div>\\n                <div class=\\\"card-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-4 text-center align-self-center\\\">\\n                            <img class=\\\"img-fluid\\\" src=\\\"../../assets/images/logo.png\\\">\\n                        </div>\\n                        <div class=\\\"col-md-4 pt-3\\\">\\n                            <form [formGroup]=\\\"registerForm\\\" class=\\\"form-horizontal\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <input placeholder=\\\"First Name\\\" type=\\\"text\\\"\\n                                               formControlName=\\\"firstName\\\"\\n                                               required class=\\\"form-control mb-3\\\" autofocus>\\n                                        <div\\n                                             *ngIf=\\\"firstName.errors && (firstName.dirty || firstName.touched)\\\">\\n                                            <p class=\\\"text-danger\\\" *ngIf=\\\"!!firstName.errors.required\\\">First Name is\\n                                                required</p>\\n                                        </div>\\n                                    </div>\\n\\n                                <div class=\\\"form-group\\\">\\n                                    <input placeholder=\\\"Last Name\\\" type=\\\"text\\\"\\n                                           formControlName=\\\"lastName\\\"\\n                                           required class=\\\"form-control mb-3\\\">\\n                                    <div *ngIf=\\\"lastName.errors && (lastName.dirty || lastName.touched)\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"!!lastName.errors.required\\\">Last Name is\\n                                            required</p>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"form-group\\\">\\n                                    <input type=\\\"text\\\" class=\\\"form-control mb-3\\\" formControlName=\\\"email\\\"\\n                                           placeholder=\\\"Email\\\" required>\\n                                    <div *ngIf=\\\"email.errors && (email.dirty || email.touched)\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"!!email.errors.required\\\">Email is\\n                                            required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"!!email.errors.pattern\\\">For example: \\\"you@email.com\\\"</p>\\n                                    </div>\\n                                    <p class=\\\"text-danger\\\" *ngIf=\\\"loading\\\">Email is already taken</p>\\n                                </div>\\n\\n                                <div class=\\\"form-group\\\">\\n                                    <input type=\\\"password\\\" class=\\\"form-control mb-3\\\" formControlName=\\\"password\\\"\\n                                           placeholder=\\\"Password\\\" required>\\n                                    <div *ngIf=\\\"password.errors && (password.dirty || password.touched)\\\">\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"!!password.errors.required\\\">Password is\\n                                            required</p>\\n                                        <p class=\\\"text-danger\\\" *ngIf=\\\"!!password.errors.pattern\\\">Password must be at least 6 characters and include a number</p>\\n                                    </div>\\n                                </div>\\n\\n                                <button class=\\\"btn btn-lg btn-outline-success btn-block mb-1\\\" type=\\\"submit\\\" (click)=\\\"registerUser()\\\" [disabled]=\\\"registerForm.invalid\\\">Register\\n                                    </button>\\n                            </form>\\n                            <!--<form [formGroup]=\\\"registerForm\\\" class=\\\"form-register\\\">-->\\n                            <!--<div class=\\\"form-group\\\">-->\\n                            <!--<input type=\\\"text\\\" class=\\\"form-control mb-3\\\" formControlName=\\\"firstName\\\"-->\\n                            <!--[ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\"-->\\n                            <!--placeholder=\\\"First Name\\\" autofocus>-->\\n                            <!--<div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">-->\\n                            <!--<div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>-->\\n                            <!--</div>-->\\n                            <!--</div>-->\\n                            <!--<div class=\\\"form-group\\\">-->\\n                            <!--<input type=\\\"text\\\" class=\\\"form-control mb-3\\\" formControlName=\\\"lastName\\\"-->\\n                            <!--[ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\"-->\\n                            <!--placeholder=\\\"Last Name\\\">-->\\n                            <!--<div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">-->\\n                            <!--<div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>-->\\n                            <!--</div>-->\\n                            <!--</div>-->\\n                            <!--<div class=\\\"form-group\\\">-->\\n                            <!--<input type=\\\"text\\\" class=\\\"form-control mb-3\\\" formControlName=\\\"email\\\"-->\\n                            <!--[ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\"-->\\n                            <!--placeholder=\\\"Email\\\">-->\\n                            <!--<div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">-->\\n                            <!--<div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>-->\\n                            <!--</div>-->\\n                            <!--</div>-->\\n                            <!--<div class=\\\"form-group\\\">-->\\n                            <!--<input type=\\\"text\\\" class=\\\"form-control mb-3\\\" formControlName=\\\"password\\\"-->\\n                            <!--[ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\"-->\\n                            <!--placeholder=\\\"password\\\">-->\\n                            <!--<div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">-->\\n                            <!--<div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>-->\\n                            <!--<div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>-->\\n                            <!--</div>-->\\n                            <!--</div>-->\\n                            <!--<button class=\\\"btn btn-lg btn-outline-success btn-block mb-1\\\" type=\\\"submit\\\" (click)=\\\"registerUser()\\\">Register-->\\n                            <!--</button>-->\\n                            <!--</form>-->\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<hr>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {UserService} from \"../../services/user.service\";\nimport {Router, NavigationExtras} from '@angular/router';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n    loading = false;\n\n    registerForm: FormGroup;\n    firstName: FormControl;\n    lastName: FormControl;\n    email: FormControl;\n    password: FormControl;\n\n    constructor(\n        private userService: UserService,\n        private router: Router\n    ) {\n    }\n\n    ngOnInit() {\n        this.createFormControls();\n        this.createForm();\n    }\n\n    createFormControls() {\n        this.firstName = new FormControl('', Validators.required);\n        this.lastName = new FormControl('', Validators.required);\n\n        this.email = new FormControl('', [\n            Validators.required,\n            Validators.pattern(\"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,6})+$\")\n        ]);\n\n        this.password = new FormControl(\n            '', [\n                Validators.required,\n                Validators.pattern(/^(?=.*?[a-z])(?=.*?[0-9]).{6,}$/)\n            ]);\n\n    };\n\n    createForm() {\n        this.registerForm = new FormGroup({\n            firstName: this.firstName,\n            lastName: this.lastName,\n            email: this.email,\n            password: this.password\n        });\n    };\n\n    registerUser() {\n        this.userService.register(this.registerForm.value).subscribe(\n            res => {\n                let navigationExtras: NavigationExtras = {\n                    queryParams: {\n                        'data': res['id'],\n                    }\n                };\n                this.router.navigate(['/confirm'], navigationExtras);\n            },\n            error => {\n                error.error.errors.forEach(state => {\n                    if (state.msg === 'E-mail already in use') {\n                        this.loading = true;\n                        setTimeout(()=> {\n                            this.loading = false;\n                        }, 2000);\n                    }\n                });\n            }\n        );\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n    api: {\n        apiUrl: 'http://localhost:3000',\n    }\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","﻿import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport {CookieService} from \"ngx-cookie-service\";\r\n\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private cookieService: CookieService\r\n                ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        if (this.cookieService.get('currentUser')) {\r\n            // logged in so return true\r\n            return true;\r\n        }\r\n\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\r\n        return false;\r\n    }\r\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","﻿import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {environment} from \"../environments/environment\";\r\nimport { map } from 'rxjs/operators';\r\nimport {User} from \"../models/user\";\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n    cookieValue: any;\r\n    constructor(\r\n        private http: HttpClient,\r\n        private cookieService: CookieService\r\n    ) { }\r\n\r\n    login(user:User) {\r\n        return this.http.post(`${environment.api.apiUrl}/api/users/login`, user)\r\n            .pipe(map(user => {\r\n                this.cookieValue = user;\r\n                if (user) {\r\n                    this.cookieService.set( 'currentUser',JSON.stringify(this.cookieValue.id));\r\n                    // localStorage.setItem('currentUser', JSON.stringify(user));\r\n                }\r\n                return user;\r\n            }));\r\n  }\r\n\r\n    logout() {\r\n        // remove user from Cookies to log user out\r\n        this.cookieService.delete('currentUser');\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User} from \"../models/user\";\r\nimport {environment} from \"../environments/environment\";\r\n\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    register(user: User) {\r\n        return this.http.post(`${environment.api.apiUrl}/api/users/registration`, user);\r\n    }\r\n\r\n    updateCode(user: User) {\r\n        return this.http.post(`${environment.api.apiUrl}/api/users/verification`, user);\r\n    }\r\n\r\n    confirm(user: User) {\r\n        return this.http.post(`${environment.api.apiUrl}/api/users/confirm`, user);\r\n    }\r\n}"],"sourceRoot":""}